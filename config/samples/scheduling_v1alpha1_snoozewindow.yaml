apiVersion: scheduling.codeacme.org/v1alpha1
kind: SnoozeWindow
metadata:
  name: weekend-snooze-policy
  namespace: default
spec:
  # Target namespace for snoozing (optional - defaults to same namespace as CR)
  namespace: "default"
  
  # Label selector to match resources for snoozing
  labelSelector:
    app: "my-app"
    environment: "development"
  
  # Schedule for when to snooze resources (weekdays at 6 PM)
  snoozeSchedule:
    cronExpression: "0 18 * * 1-5"  # Monday-Friday at 6 PM
    weekdays: [1, 2, 3, 4, 5]       # Monday through Friday
    weekends: false
  
  # Schedule for when to wake resources (weekdays at 8 AM)
  wakeSchedule:
    cronExpression: "0 8 * * 1-5"   # Monday-Friday at 8 AM
    weekdays: [1, 2, 3, 4, 5]       # Monday through Friday
    weekends: false
  
  # Timezone for schedule calculations
  timezone: "America/New_York"
  
  # Resource types to manage
  resourceTypes:
    - kind: "Deployment"
      apiVersion: "apps/v1"
      scaleToZero: true
      delete: false
    - kind: "StatefulSet"
      apiVersion: "apps/v1"
      scaleToZero: true
      delete: false
    - kind: "CronJob"
      apiVersion: "batch/v1"
      scaleToZero: false
      delete: true
    - kind: "Job"
      apiVersion: "batch/v1"
      scaleToZero: false
      delete: true
  
  # Action to take when snoozing
  snoozeAction:
    scaleToZero: true
    delete: false
    patch:
      type: "strategic"
      data: '{"spec":{"replicas":0}}'
  
  # Backup configuration
  backupConfig:
    storeInAnnotations: true
    storeInConfigMap: false
    configMapName: "snooze-backup"
---
# Example deployment that will be managed by kube-snooze
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-app
  namespace: default
  labels:
    app: "my-app"
    environment: "development"
  annotations:
    kube-snooze/enabled: "true"
    kube-snooze/policy: "weekend-snooze-policy"
spec:
  replicas: 3
  selector:
    matchLabels:
      app: "my-app"
  template:
    metadata:
      labels:
        app: "my-app"
    spec:
      containers:
      - name: app
        image: nginx:latest
        ports:
        - containerPort: 80
---
# Example StatefulSet that will be managed by kube-snooze
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: example-database
  namespace: default
  labels:
    app: "my-app"
    environment: "development"
  annotations:
    kube-snooze/enabled: "true"
    kube-snooze/policy: "weekend-snooze-policy"
spec:
  replicas: 1
  serviceName: "example-database"
  selector:
    matchLabels:
      app: "my-app"
  template:
    metadata:
      labels:
        app: "my-app"
    spec:
      containers:
      - name: database
        image: postgres:13
        env:
        - name: POSTGRES_DB
          value: "example"
        - name: POSTGRES_PASSWORD
          value: "password"
        ports:
        - containerPort: 5432
---
# Example CronJob that will be managed by kube-snooze
apiVersion: batch/v1
kind: CronJob
metadata:
  name: example-backup
  namespace: default
  labels:
    app: "my-app"
    environment: "development"
  annotations:
    kube-snooze/enabled: "true"
    kube-snooze/policy: "weekend-snooze-policy"
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: backup
            image: busybox:latest
            command:
            - /bin/sh
            - -c
            - echo "Backup completed"
          restartPolicy: OnFailure
